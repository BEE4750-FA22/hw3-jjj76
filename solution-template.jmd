---
title: "BEE 4750/5750 Homework 3"
author: "Jaden Jeswald (jjj76)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: true
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
Pkg.add("JuMP")
using Plots
```

<!--- this block is hidden, but stores the generator and demand data; you can use a dataframe to combine these or refactor as you'd like -->
```julia; echo = false; results = "hidden"
# generator data
investment_cost = [457000, 268000, 85000, 62580, 92000, 92000]
op_cost = [0, 22, 35, 45, 0, 0]
co2_emissions = [0, 1, 0.43, 0.55, 0, 0]
thermal_cf = [0.95, 1, 1, 1]

hours = 1:24
demand = [1517, 1486, 1544, 1733, 2058, 2470, 2628, 2696, 2653, 2591, 2626, 2714, 2803, 2842, 2891,  2821, 3017, 3074, 2957,  2487, 2249, 1933, 1684, 1563]
wind_cf = [0.58, 0.57, 0.55, 0.28, 0.14, 0.21, 0.03, 0.04, 0.01, 0.04, 0.04, 0.01, 0.04, 0.04, 0.01, 0.01, 0.01, 0.13, 0.30, 0.45, 0.44, 0.57, 0.55, 0.58]
solar_cf = [0, 0, 0, 0, 0, 0, 0.20, 0.57, 0.80, 0.93, 0.99, 0.99, 0.85, 0.99, 0.95, 0.81, 0.55, 0.12, 0, 0, 0, 0, 0, 0]
```

# Problem 1
### #goal is expand capacity while minimizing costs of investment and operation 
## Problem 1.1
### variables
The decision variables are: 
    - $x_g$ : installed capacity in MW
    - $g$ : generator type
    - $t$ : time period in hours (1-24)
    - $y_{g,t}$ : production in MW 
    - $nse_t$ : non-served load in MW
    - $days$ : days in time period (365)

```julia
using JuMP
using HiGHS
generator_capacity = Model(HiGHS.Optimizer);
generator_type = ["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"];
G = 1:length(generator_type);
T = 1:length(hours);
```
## Problem 1.2
### formulate objective function
The goal of the optimization is to minimize $Z$ over the span of one year. $Z$ is the sum of the investment cost, operating cost, and any penalty. 
```math
minZ = \sum_{g}C_g^{\text{INV}}x_g + \sum_{g}\sum_{t=1}^{24} days*C_g^{\text{op}} y_{g,t} + \sum_{t}NonServeEnergy_cost nse_t, 

investment cost for generator = $C_g^{\text{inv}}$ 
operating cost for generator = $C_g^{\text{op}}$ 
demand (MW) in hour $t$ = $D_t$ 

investment cost = $\sum_{g}C_g^{\text{inv}}x_g$ 
operating cost  = $\sum_{g}\sum_{t=1}^{24} days*C_g^{\text{op}} y_{g, t}$ 
penalty of non served demand = $\sum_{t}NonServeEnergy_{cost} nse_t$  
```
In this optimization all 365 days are equal in demand (which is ideal but unrealistic)

## Problem 1.3
### formulate constraints
Each generator has a limit in it's maximum capacity and wind and solar are dependent on time during the day. 
This means that the production must be less than or equal to the capacity factor for a generator type multiplied by the installed generator_capacity
``` math
y_{g,t}\leq CF_g x_g
```

There is a goal in terms of generated electricity as more or less leads to economic loss. 
Sum of electricity generated plus nonserved energy load = demand
``` math
\sum_{g} y_{g,t} + nse_t = D_t
```
All non cost values must be positive as energy generation, capcities, and loads cannot be negative
```math
x_g\geq 0,\ y_{g,t}\geq 0, nse_t\geq 0.
```

## Problem 1.4
### implement JuMP
```julia
@variable(generator_capacity,x[G]>=0);
@variable(generator_capacity,y[G,T]>=0);
@variable(generator_capacity,nse[T]>=0);
@objective(generator_capacity, Min, investment_cost'*x + 365*(sum(op_cost'*y) + sum(nse)*1000));
availability = zeros(length(G),length(T));
availability[1,:] = thermal_cf[1]*ones(length(T));
availability[2:4,:] = thermal_cf[2:4]*ones(length(T))';
availability[5,:] = wind_cf;
availability[6,:] = solar_cf;
@constraint(generator_capacity, availability_1[ g in G, t in T], y[g,t] <= availability[g,t]*x[g]);
@constraint(generator_capacity, load[t in T], sum(y[:,t]) + nse[t] == demand[t]);

optimize!(generator_capacity)
```
## Problem 1.5
### Find Solution
```julia
x_g = value.(x); #installed capacity

cost_total = objective_value(generator_capacity);

nse_total = sum(value.(nse));
```
Installed capacities: 
Geothermal: 0
Coal: 0
CCGT: 1704.2566371681414 MW
CT: 881.3274336283189 MW
Wind: 1238.053097345133 MW
Solar: 2728.9085545722714 MW

Total Cost: 9.12142212241888e8 dollars

Nonserved Load: 0 MW


## Problem 1.6
### Visualize Solution
```julia
gr()
import Pkg;
Pkg.add("Measures")
using Measures

s_load=ones(length(G),length(T));
s_load[:,:]=value.(y)[:,:];

plot(hours,s_load[1,:],label="Geothermal",xlabel="Hours",ylabel="Production (MW)", title = "Energy Production vs Time in Hours", legendfontsize=5);
plot!(hours,s_load[2,:],label="Coal");
plot!(hours,s_load[3,:],label="CCGT");
plot!(hours,s_load[4,:],label="CT");
plot!(hours,s_load[5,:],label="Wind");
plot!(hours,s_load[6,:],label="Solar");
plot!(demand, color=:red, label="Demand", linestyle=:dash)

areaplot(hours,s_load',label=permutedims(["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"]),xlabel="Hours",ylabel="Production (MW)", title = "Stacked Energy Production vs Time in Hours", legendfontsize=5);
plot!(demand, color=:red, label="Demand", linestyle=:dash)
```


# Problem 2
### CO2 limits of 1.5 MtCO2/year
## Problem 2.1
### identify changes needed
More constraints:
```math
\sum_{g}\sum_{t=1}^{24} T*E_{g}y_{g,t}\leq 1.5\times 10^{6},

CO2 emissions (t/MWh) = $E_g$ 
```
above constraint ensures total emissions are within limits

## Problem 2.2
### Implement in JuMP
```julia 
using JuMP
generator_capacity_CO2 = Model(HiGHS.Optimizer);
@variable(generator_capacity_CO2,x_CO2[G]>=0);
@variable(generator_capacity_CO2,y_CO2[G,T]>=0);
@variable(generator_capacity_CO2,nse_CO2[T]>=0);
@objective(generator_capacity_CO2,Min,investment_cost'*x_CO2 + 365*(sum(op_cost'*y_CO2) + sum(nse_CO2)*1000));
@constraint(generator_capacity_CO2,availability_2[g in G,t in T], y_CO2[g,t] <= availability[g,t] * x_CO2[g]);
@constraint(generator_capacity_CO2,load_2[t in T], sum(y_CO2[:,t]) + nse_CO2[t] == demand[t]);
@constraint(generator_capacity_CO2,emission_limit, 0.365*sum(co2_emissions'*y_CO2)<= 10^3);
optimize!(generator_capacity_CO2);
```
## Problem 2.3
### Find solution
```julia
x_g_CO2 = value.(x_CO2); #installed capacity

cost_total_CO2 = objective_value(generator_capacity_CO2);

nse_total_CO2 = sum(value.(nse_CO2));
```
Installed capacities: 
Geothermal: 1667.5450297660202 MW
Coal: 0
CCGT: 757.3150874035459 MW
CT: 470.63115154400367 MW
Wind: 611.9863538987386 MW
Solar: 1519.3979730657943 MW

Total Cost: 1.1334512774182653e9 dollars

Nonserved Load: 0 MW
## Problem 2.4
### Visualize solution
```julia
gr()
import Pkg;
Pkg.add("Measures")
using Measures

s_load_CO2 = ones(length(G),length(T));
s_load_CO2[:,:]=value.(y_CO2)[:,:];

plot(transpose(s_load_CO2),label=permutedims(["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"]),xlabel="Hours",ylabel="Production (MW)", title = "Energy Production vs Time in Hours w/ CO2 Limit", legendfontsize=5)

areaplot(transpose(s_load_CO2),label=permutedims(["Geothermal", "Coal", "CCGT", "CT", "Wind", "Solar"]),xlabel="Hours",ylabel="Production (MW)", title = "Stacked Energy Production vs Time in Hours w/ CO2 Limit", legendfontsize=5)

```
The geothermal generator had much more contribution when there was a CO2 emissions limit. To balance this, all other generation types besides coal decreased. 
## Problem 2.5
### Value of CO2 limit + 1000 tCO2/year
```julia
shadow_price.(emission_limit);
```

If there was an additional allowance of 1000 tCO2/year the total cost would decrease by $156844.22393656467.  

# References
https://docs.juliaplots.org/latest/gallery/pyplot/generated/pyplot-ref58/
https://jump.dev/JuMP.jl/stable/manual/constraints/

